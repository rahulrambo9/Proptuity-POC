basePath: /api
definitions:
  model.CreateOrderRequest:
    properties:
      buyer_id:
        example: "456"
        type: string
      offer_price:
        example: 1000000
        type: integer
      order_type:
        description: or "rent"
        example: buy
        type: string
      property_id:
        example: "123"
        type: string
    type: object
  model.CreatePropertyRequest:
    properties:
      bathrooms:
        example: 2
        type: integer
      bedrooms:
        example: 3
        type: integer
      description:
        example: A spacious apartment with ocean view
        type: string
      location:
        example: New York
        type: string
      name:
        example: Ocean View Apartment
        type: string
      price:
        example: 3000000
        type: integer
      square_feet:
        example: 1200
        type: integer
      type:
        example: apartment
        type: string
    type: object
  model.ErrorResponse:
    properties:
      message:
        example: Error occurred
        type: string
    type: object
  model.OrderResponse:
    properties:
      buyer_id:
        example: "456"
        type: string
      id:
        example: "789"
        type: string
      offer_price:
        example: 1000000
        type: integer
      property_id:
        example: "123"
        type: string
      status:
        example: pending
        type: string
    type: object
  model.PropertyResponse:
    properties:
      bathrooms:
        example: 2
        type: integer
      bedrooms:
        example: 3
        type: integer
      description:
        example: A spacious apartment with ocean view
        type: string
      id:
        example: property123
        type: string
      location:
        example: New York
        type: string
      name:
        example: Ocean View Apartment
        type: string
      price:
        example: 3000000
        type: integer
      square_feet:
        example: 1200
        type: integer
      type:
        example: apartment
        type: string
    type: object
  model.RegisterClientRequest:
    properties:
      client_id:
        example: client123
        type: string
      client_secret:
        example: ' secret123'
        type: string
    type: object
  model.RegisterClientResponse:
    properties:
      client_id:
        example: client123
        type: string
      client_secret:
        example: ' secret123'
        type: string
    type: object
  model.User:
    properties:
      _id:
        type: string
      email:
        type: string
      location:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      salt:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  responses.AuthorizeClientResponse:
    properties:
      authorization_code:
        type: string
      message:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  responses.ExchangeTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  responses.RegisterClientResponse:
    properties:
      data:
        $ref: '#/definitions/model.RegisterClientResponse'
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
  responses.UserResponse:
    properties:
      data:
        $ref: '#/definitions/model.User'
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
  responses.UsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      error: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
  description: JWT Authentication header for all requests
  version: "3.0"
paths:
  /authorize:
    get:
      consumes:
      - application/json
      description: Authorizes a client to access the user's resources and provides
        an authorization code.
      parameters:
      - description: Client ID
        in: query
        name: client_id
        required: true
        type: string
      - description: Redirect URI
        in: query
        name: redirect_uri
        required: true
        type: string
      - description: Response Type
        in: query
        name: response_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Client authorized successfully
          schema:
            $ref: '#/definitions/responses.AuthorizeClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authorize a client
      tags:
      - authorization
  /callback:
    get:
      consumes:
      - application/json
      description: Callback after the user authorizes the client.
      parameters:
      - description: Authorization Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Callback successful
          schema:
            $ref: '#/definitions/responses.AuthorizeClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Callback after authorization
      tags:
      - authorization
  /oauth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create token
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Failed to create token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create token
      tags:
      - Authentication
  /orders:
    post:
      consumes:
      - application/json
      description: Creates a new order for a property purchase or rental.
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/model.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new order
      tags:
      - orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an order by its ID.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order details retrieved successfully
          schema:
            $ref: '#/definitions/model.OrderResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get details of an order
      tags:
      - orders
  /properties:
    get:
      consumes:
      - application/json
      description: Fetches a list of properties based on filters such as location,
        price range, and property type.
      parameters:
      - description: City filter
        in: query
        name: city
        type: string
      - description: Minimum price filter
        in: query
        name: min_price
        type: integer
      - description: Maximum price filter
        in: query
        name: max_price
        type: integer
      - description: Property type filter (e.g., apartment, house)
        in: query
        name: property_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Properties retrieved successfully
          schema:
            items:
              $ref: '#/definitions/model.PropertyResponse'
            type: array
        "404":
          description: No properties found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Get all properties
      tags:
      - properties
    post:
      consumes:
      - application/json
      description: Onboards a new property for sale or rent.
      parameters:
      - description: Property details
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/model.CreatePropertyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Property created successfully
          schema:
            $ref: '#/definitions/model.PropertyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new property
      tags:
      - properties
  /register-client:
    post:
      consumes:
      - application/json
      description: Registers a new client with the authorization server.
      parameters:
      - description: Client details
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/model.RegisterClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Client registered successfully
          schema:
            $ref: '#/definitions/responses.RegisterClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new client
      tags:
      - authorization
  /token:
    post:
      consumes:
      - application/json
      description: Exchanges the authorization code for an access token.
      parameters:
      - description: Client ID
        in: query
        name: client_id
        required: true
        type: string
      - description: Client Secret
        in: query
        name: client_secret
        required: true
        type: string
      - description: Authorization Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token exchanged successfully
          schema:
            $ref: '#/definitions/responses.ExchangeTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Exchange authorization code for access token
      tags:
      - authorization
  /user/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Login
      tags:
      - Users
  /user/reset:
    post:
      consumes:
      - application/json
      description: ResetPassword
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Failed to reset password
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: ResetPassword
      tags:
      - Users
  /v1/users:
    get:
      description: Retrieves all users.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UsersResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.UsersResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details.
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new user
      tags:
      - Users
  /v1/users/{userid}:
    delete:
      description: Deletes a user by the given ID.
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a user by ID
      tags:
      - Users
    get:
      description: Retrieves a user by the given ID.
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates an existing user with the provided details.
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.UserResponse'
      security:
      - ApiKeyAuth: []
      summary: Update an existing user
      tags:
      - Users
swagger: "2.0"
